{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/sapxsumpw.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783\u201399. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = float64ToFloat32( alpha + x[ ix ] );\n\t\ts1 = float64ToFloat32( alpha + x[ ix+stride ] );\n\t\ts2 = float64ToFloat32( alpha + x[ ix+(2*stride) ] );\n\t\ts3 = float64ToFloat32( alpha + x[ ix+(3*stride) ] );\n\t\ts4 = float64ToFloat32( alpha + x[ ix+(4*stride) ] );\n\t\ts5 = float64ToFloat32( alpha + x[ ix+(5*stride) ] );\n\t\ts6 = float64ToFloat32( alpha + x[ ix+(6*stride) ] );\n\t\ts7 = float64ToFloat32( alpha + x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + float64ToFloat32( alpha + x[ ix+stride ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + float64ToFloat32( alpha + x[ ix+(2*stride) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + float64ToFloat32( alpha + x[ ix+(3*stride) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + float64ToFloat32( alpha + x[ ix+(4*stride) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + float64ToFloat32( alpha + x[ ix+(5*stride) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + float64ToFloat32( alpha + x[ ix+(6*stride) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + float64ToFloat32( alpha + x[ ix+(7*stride) ] ) );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sapxsumpw( n, alpha, x, stride, ix ) + sapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783\u201399. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar sapxsumpw = require( './sapxsumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each single-precision floating-point strided array element and compute the sum using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-sapxsumpw\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var sapxsumpw = require( '@stdlib/blas-ext-base-sapxsumpw' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var sapxsumpw = require( '@stdlib/blas-ext-base-sapxsumpw' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumpw.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar sapxsumpw;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsapxsumpw = main;\n} else {\n\tsapxsumpw = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sapxsumpw;\n\n// exports: { \"ndarray\": \"sapxsumpw.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "float64ToFloat32", "floor", "BLOCKSIZE", "sapxsumpw", "N", "alpha", "x", "stride", "offset", "ix", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "M", "n", "i", "require_sapxsumpw", "__commonJSMin", "exports", "module", "float64ToFloat32", "sum", "sapxsumpw", "N", "alpha", "x", "stride", "ix", "s", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "sapxsumpw", "ndarray", "join", "tryRequire", "isError", "main", "sapxsumpw", "tmp"]
}
