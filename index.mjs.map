{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/sapxsumpw.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn float64ToFloat32( N * float64ToFloat32( alpha + x[ ix ] ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = float64ToFloat32( alpha + x[ ix ] );\n\t\ts1 = float64ToFloat32( alpha + x[ ix+strideX ] );\n\t\ts2 = float64ToFloat32( alpha + x[ ix+(2*strideX) ] );\n\t\ts3 = float64ToFloat32( alpha + x[ ix+(3*strideX) ] );\n\t\ts4 = float64ToFloat32( alpha + x[ ix+(4*strideX) ] );\n\t\ts5 = float64ToFloat32( alpha + x[ ix+(5*strideX) ] );\n\t\ts6 = float64ToFloat32( alpha + x[ ix+(6*strideX) ] );\n\t\ts7 = float64ToFloat32( alpha + x[ ix+(7*strideX) ] );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + float64ToFloat32( alpha + x[ ix+strideX ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + float64ToFloat32( alpha + x[ ix+(2*strideX) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + float64ToFloat32( alpha + x[ ix+(3*strideX) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + float64ToFloat32( alpha + x[ ix+(4*strideX) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + float64ToFloat32( alpha + x[ ix+(5*strideX) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + float64ToFloat32( alpha + x[ ix+(6*strideX) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + float64ToFloat32( alpha + x[ ix+(7*strideX) ] ) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sapxsumpw( n, alpha, x, strideX, ix ) + sapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = sapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport sapxsumpw from './sapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n"],"names":["BLOCKSIZE","sapxsumpw","N","alpha","x","strideX","offsetX","ix","s0","s1","s2","s3","s4","s5","s6","s7","M","s","n","i","float64ToFloat32","floor","ndarray","stride2offset","setReadOnly"],"mappings":";;waA+BA,IAAIA,EAAY,IA+BhB,SAASC,EAAWC,EAAGC,EAAOC,EAAGC,EAASC,GACzC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKjB,GAAK,EACT,OAAO,EAGR,GADAK,EAAKD,EACY,IAAZD,EACJ,OAAOe,EAAkBlB,EAAIkB,EAAkBjB,EAAQC,EAAGG,KAE3D,GAAKL,EAAI,EAAI,CAGZ,IADAe,EAAI,EACEE,EAAI,EAAGA,EAAIjB,EAAGiB,IACnBF,EAAIG,EAAkBH,EAAIG,EAAkBjB,EAAQC,EAAGG,KACvDA,GAAMF,EAEP,OAAOY,CACP,CACD,GAAKf,GAAKF,EAAY,CAarB,IAXAQ,EAAKY,EAAkBjB,EAAQC,EAAGG,IAClCE,EAAKW,EAAkBjB,EAAQC,EAAGG,EAAGF,IACrCK,EAAKU,EAAkBjB,EAAQC,EAAGG,EAAI,EAAEF,IACxCM,EAAKS,EAAkBjB,EAAQC,EAAGG,EAAI,EAAEF,IACxCO,EAAKQ,EAAkBjB,EAAQC,EAAGG,EAAI,EAAEF,IACxCQ,EAAKO,EAAkBjB,EAAQC,EAAGG,EAAI,EAAEF,IACxCS,EAAKM,EAAkBjB,EAAQC,EAAGG,EAAI,EAAEF,IACxCU,EAAKK,EAAkBjB,EAAQC,EAAGG,EAAI,EAAEF,IACxCE,GAAM,EAAIF,EAEVW,EAAId,EAAI,EACFiB,EAAI,EAAGA,EAAIjB,EAAEc,EAAGG,GAAK,EAC1BX,EAAKY,EAAkBZ,EAAKY,EAAkBjB,EAAQC,EAAGG,KACzDE,EAAKW,EAAkBX,EAAKW,EAAkBjB,EAAQC,EAAGG,EAAGF,KAC5DK,EAAKU,EAAkBV,EAAKU,EAAkBjB,EAAQC,EAAGG,EAAI,EAAEF,KAC/DM,EAAKS,EAAkBT,EAAKS,EAAkBjB,EAAQC,EAAGG,EAAI,EAAEF,KAC/DO,EAAKQ,EAAkBR,EAAKQ,EAAkBjB,EAAQC,EAAGG,EAAI,EAAEF,KAC/DQ,EAAKO,EAAkBP,EAAKO,EAAkBjB,EAAQC,EAAGG,EAAI,EAAEF,KAC/DS,EAAKM,EAAkBN,EAAKM,EAAkBjB,EAAQC,EAAGG,EAAI,EAAEF,KAC/DU,EAAKK,EAAkBL,EAAKK,EAAkBjB,EAAQC,EAAGG,EAAI,EAAEF,KAC/DE,GAAM,EAAIF,EAMX,IAHAY,EAAIG,EAAkBA,EAAkBA,EAAiBZ,EAAGC,GAAMW,EAAiBV,EAAGC,IAAQS,EAAkBA,EAAiBR,EAAGC,GAAMO,EAAiBN,EAAGC,KAGrJI,EAAIjB,EAAGiB,IACfF,EAAIG,EAAkBH,EAAIG,EAAkBjB,EAAQC,EAAGG,KACvDA,GAAMF,EAEP,OAAOY,CACP,CAID,OAFAC,EAAIG,EAAOnB,EAAE,GAENkB,EAAkBnB,EADzBiB,GAAKA,EAAI,EAC8Bf,EAAOC,EAAGC,EAASE,GAAON,EAAWC,EAAEgB,EAAGf,EAAOC,EAAGC,EAASE,EAAIW,EAAEb,GAC3G,CC9EA,SAASJ,EAAWC,EAAGC,EAAOC,EAAGC,GAChC,OAAOiB,EAASpB,EAAGC,EAAOC,EAAGC,EAASkB,EAAerB,EAAGG,GACzD,CC1BAmB,EAAAvB,EAAA,UAAAqB"}